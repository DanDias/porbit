{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/components/MineralType.js","webpack:///./src/components/ui.js","webpack:///./src/spaceobjects/OrbitObject.js","webpack:///./src/spaceobjects/Ship.js","webpack:///./src/spaceobjects/Collector.js","webpack:///./src/spaceobjects/Shielder.js","webpack:///./src/spaceobjects/Bullet.js","webpack:///./src/components/Gun.js","webpack:///./src/spaceobjects/WeaponPlatform.js","webpack:///./src/spaceobjects/Interceptor.js","webpack:///./src/components/Spawner.js","webpack:///./src/spaceobjects/Planet.js","webpack:///./src/spaceobjects/EnemyRocket.js","webpack:///./src/spaceobjects/Asteroid.js","webpack:///./src/game.js","webpack:///./src/scenes/InGame.js","webpack:///./src/scenes/InGameUI.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","installedChunks","push","Object","prototype","hasOwnProperty","call","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","Silver","color","Gold","UIButton","Phaser","GameObjects","Sprite","[object Object]","text","this","label","scene","x","y","width","height","style","super","add","existing","setInteractive","useHandCursor","displayWidth","displayHeight","Text","setOrigin","setDepth","selected","tintColor","undefined","setTint","clearTint","FloatingText","tweens","targets","duration","ease","delay","alpha","onComplete","finishTween","tween","FPSCounter","fpsHighText","fill","fontSize","fpsActiveText","fpsLowText","low","high","game","delta","time","fps","Math","round","loop","actualFps","HealthBar","startingValue","bar","Graphics","maxValue","aThird","draw","destroy","amount","clear","fillStyle","fillRect","floor","OrbitObject","phaser_default","a","Physics","Arcade","mass","texture","frame","physics","body","setScale","durability","type","scale","radius","velocity","setTo","callback","destroyed","collision","other","damage","Ship","detectionRadius","targetTypes","objects","detectionArea","Geom","Circle","forEach","obj","filter","ContainsPoint","Point","console","log","on","dist","v","checkDist","Distance","Between","speed","objPos","Vector2","objVel","thisPos","ox","oy","h1","h2","minusPHalf","discriminant","root","sqrt","t1","t2","tMin","min","tMax","max","Collector","collectCallback","caught","setVelocity","setActive","enable","vel","normalize","overlap","Shielder","empty","rechargeTimer","particles","emitter","createEmitter","frames","cycle","quantity","frequency","lifespan","blendMode","startFollow","target","addShielder","createGravityWell","power","gravity","circle","halfWidth","setDeathZone","source","active","updateShield","start","rotation","Angle","BetweenPoints","PI","stop","removeShielder","Bullet","life","world","bodies","entries","gameObject","overlaps","bullet","takeDamage","setVisible","setPosition","Gun","parent","recharge","rechargeMax","canFire","aimPoint","bulletVel","WeaponPlatform","gun","update","getClosestTarget","pointOfIntercept","getInterceptPoint","takeAShot","Interceptor","originalVelocity","originalPosition","engage","newVelocity","Spawner","class","cost","Planet","hp","shielders","shape","shields","end","emitZone","yoyo","availableShields","val","killAll","shielder","decrease","EnemyRocket","Asteroid","mineralType","game_config","AUTO","innerWidth","innerHeight","pixelArt","default","arcade","debug","Scene","spaceObjects","planet","planetMass","flickScale","inaccuracy","flickEstimate","simulationSteps","graphics","totalEnemies","spawning","money","timer","referenceWidth","referenceHeight","elapsedTime","idx","updateBody","scanForTarget","uiScene","gameOver","load","spritesheet","frameWidth","frameHeight","endFrame","atlas","me","getScene","addEventListener","event","resize","config","events","onDestroyed","destroyObject","animConfig","anims","generateFrameNumbers","first","frameRate","repeat","sprite","visible","input","pointer","cancelBubble","downPoint","cameras","main","getWorldPoint","spawnMode","showError","enemy","accelerateToObject","ZERO","points","simulateFrom","drawLine","downX","downY","upPoint","upX","upY","point","setTarget","isDown","currentPoint","delayedCall","RND","integerInRange","spawnAsteroid","spawnEnemy","setZoom","setViewport","halfHeight","setScroll","spawnPoint","center","getCenter","between","GetPoint","frac","dir","subtract","mineralKeys","keys","MineralType_default","asteroid","rocket","explode","explosion","setGameOver","won","steps","cont","simulateUpdate","to","angle","atan2","acceleration","setToPolar","item","ax","ay","dx","dy","computeVelocity","velocityX","accelerationX","dragX","drag","maxX","maxVelocity","velocityY","accelerationY","dragY","maxY","allowDrag","useDamping","allowGravity","gravX","gravY","FuzzyEqual","FuzzyGreaterThan","FuzzyLessThan","Clamp","set","ast_","boom","play","deg","x1","y1","x2","y2","trans","lineStyle","strokeLineShape","Line","midPoint","line","GetMidPoint","arrowLine","RotateAroundXY","DEG2RAD","ellipse","strokeEllipseShape","strokeCircleShape","moneyText","spawner","spawnButtons","gameScene","pos","error","b","gameOverText","fontWeight","gameOverButton","location","debugBtn","setText","xLoc","self","btn","setSelected","Game"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([2,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","exports.Silver = {\n        name: \"Silver\",\n        color: 0xC0C0C0,\n        value: 50\n    };\nexports.Gold = {\n        name: \"Gold\",\n        color: 0xD4AF37,\n        value: 100\n    };","export class UIButton extends Phaser.GameObjects.Sprite \n{\n    setText(text)\n    {\n        this.label.text = text;\n    }\n\n    constructor(scene, x, y, width, height, text, style) {\n        super(scene, x, y, 'ui-button');\n        scene.add.existing(this);\n        this.setInteractive({ useHandCursor: true });\n        this.displayWidth = width;\n        this.displayHeight = height;\n        this.label = new Phaser.GameObjects.Text(scene, x, y, text, style);\n        this.label.setOrigin(0.5);\n        this.label.setDepth(10);\n        this.setDepth(10);\n        scene.add.existing(this.label);\n    }\n\n    setSelected(selected, tintColor)\n    {\n        if (tintColor === undefined) \n            tintColor = 0x00AA00;\n        if (selected)\n            this.setTint(tintColor);\n        else\n            this.clearTint();\n    }\n}\n\nexport class FloatingText extends Phaser.GameObjects.Text\n{\n    constructor(scene, x, y, text, style)\n    {\n        super(scene,x,y,text,style);\n        scene.tweens.add({\n            targets: this,\n            y: { value: y-150, duration: 300, ease: 'Linear', delay: 1000 },\n            alpha: { value: 0, duration: 300, ease: 'EaseOut', delay: 1000 },\n            onComplete: this.finishTween\n        });\n    }\n\n    finishTween(tween, targets)\n    {\n        //this.destroy();\n    }\n}\n\nexport class FPSCounter\n{\n    constructor (scene, x, y)\n    {\n        this.fpsHighText = new Phaser.GameObjects.Text(scene, x, y, \"\", { fill: '#0A0', fontSize: '10px'} );\n        this.fpsActiveText = new Phaser.GameObjects.Text(scene, x, y+10, \"\", { fill: '#AA0', fontSize: '10px'} );\n        this.fpsLowText = new Phaser.GameObjects.Text(scene, x, y+20, \"\", { fill: '#A00', fontSize: '10px'} );\n    \n        scene.add.existing(this.fpsHighText);\n        scene.add.existing(this.fpsActiveText);\n        scene.add.existing(this.fpsLowText);\n\n        this.fpsActiveText.low = 999;\n        this.fpsActiveText.high = 0;\n        this.game = scene.game;\n    }\n\n    update(delta,time)\n    {\n        var fps = Math.round(this.game.loop.actualFps);\n        this.fpsActiveText.text = fps;\n        if (this.fpsActiveText.high < fps)\n            this.fpsActiveText.high = this.fpsHighText.text = fps;\n        if (this.fpsActiveText.low > fps)\n            this.fpsActiveText.low = this.fpsLowText.text = fps;   \n    }\n}\n\nexport class HealthBar {\n\n    constructor (scene, x, y, startingValue)\n    {\n        this.bar = new Phaser.GameObjects.Graphics(scene);\n\n        this.x = x;\n        this.y = y;\n        this.maxValue = this.value = startingValue;\n        this.aThird = startingValue * 0.3;\n        this.p = 76 / startingValue;\n\n        this.draw();\n\n        scene.add.existing(this.bar);\n    }\n\n    destroy()\n    {\n        this.bar.destroy();\n    }\n\n    decrease (amount)\n    {\n        this.value -= amount;\n\n        if (this.value < 0)\n        {\n            this.value = 0;\n        }\n\n        this.draw();\n\n        return (this.value === 0);\n    }\n\n    draw ()\n    {\n        this.bar.clear();\n\n        //  BG\n        this.bar.fillStyle(0x000000);\n        this.bar.fillRect(this.x, this.y, 80, 16);\n\n        //  Health\n\n        this.bar.fillStyle(0xffffff);\n        this.bar.fillRect(this.x + 2, this.y + 2, 76, 12);\n\n        if (this.value < this.aThird)\n        {\n            this.bar.fillStyle(0xff0000);\n        }\n        else\n        {\n            this.bar.fillStyle(0x00ff00);\n        }\n\n        var d = Math.floor(this.p * this.value);\n\n        this.bar.fillRect(this.x + 2, this.y + 2, d, 12);\n    }\n}","import Phaser from 'phaser';\n\nexport default class extends Phaser.Physics.Arcade.Sprite\n{\n    constructor(scene, x, y, mass, texture, frame)\n    {\n        super(scene, x, y, texture, frame);\n        scene.add.existing(this);\n        scene.physics.add.existing(this);\n        this.body.mass = mass;\n        this.setScale(1);\n\n        this.durability = 1;\n        this.type = \"OrbitObject\";\n    }\n\n    setScale(scale)\n    {\n        super.setScale(scale);\n        this.body.radius = this.width*0.5*scale;\n    }\n\n    setVelocity(x,y)\n    {\n        this.body.velocity.setTo(x,y);\n    }\n\n    onDestroyed(callback)\n    {\n        this.destroyed = callback;\n    }\n\n    onCollide(callback)\n    {\n        this.collision = callback;\n    }\n\n    doCollision(other)\n    {\n        if (this.collision !== undefined)\n            this.collision(other);\n    }\n\n    takeDamage(damage)\n    {\n        this.durability -= damage; // TODO: Use mass and speed somehow instead?\n        if (this.destroyed !== undefined && this.durability <= 0)\n            this.destroyed(this);\n    }\n}","import Phaser from 'phaser'\nimport OrbitObject from './OrbitObject'\n\nexport default class extends OrbitObject\n{\n    constructor(scene, x, y, mass, texture, frame)\n    {\n        super(scene, x, y, mass, texture, frame);\n        this.type = \"Ship\";\n        this.detectionRadius = 50;\n        this.targetTypes = [];\n        this.targets = [];\n    }\n\n    scanForTarget(objects)\n    {\n        var detectionArea = new Phaser.Geom.Circle(this.x,this.y,this.detectionRadius);\n        objects.forEach((obj) => {\n            if (this.targetTypes.filter((type) => type == obj.type).length > 0 \n                && Phaser.Geom.Circle.ContainsPoint(detectionArea,new Phaser.Geom.Point(obj.x,obj.y))\n                && this.targets.filter((t) => t === obj).length == 0)\n            {\n                console.log(this.type + \" acquired target \" + obj.type);\n                obj.on(\"destroy\", () => {\n                    this.targets = this.targets.filter((o) => { o !== obj });                    \n                });\n                this.targets.push(obj);\n            }\n        });\n    }\n\n    getClosestTarget() \n    {\n        var dist = this.detectionRadius*2;\n        var obj = this.targets.filter((v) => {\n            var checkDist = Phaser.Math.Distance.Between(v.x,v.y,this.x,this.y)\n            if (checkDist <= dist)\n            {\n                dist = checkDist;\n                return true;\n            }\n            else\n            {\n                return false;\n            }\n        })[0];\n        return obj;\n    }\n\n    getInterceptPoint(obj,speed)\n    {\n        // Things we know\n        var objPos = new Phaser.Math.Vector2(obj.x,obj.y);\n        var objVel = new Phaser.Math.Vector2(obj.body.velocity.x,obj.body.velocity.y);\n        var thisPos = new Phaser.Math.Vector2(this.x,this.y);\n        \n        var ox = thisPos.x - objPos.x;\n        var oy = thisPos.y - objPos.y;\n\n        var h1 = objVel.x * objVel.x + objVel.y * objVel.y - speed * speed;\n        var h2 = ox * objVel.x + oy * objVel.y;\n        var t;\n        if (h1 == 0) { // problem collapses into a simple linear equation \n            t = -(ox * ox + oy * oy) / (2*h2);\n        } else { // solve the quadratic equation\n            var minusPHalf = -h2 / h1;\n\n            var discriminant = minusPHalf * minusPHalf - (ox * ox + oy * oy) / h1; // term in brackets is h3\n            if (discriminant < 0) { // no (real) solution then...\n                return;\n            }\n\n            var root = Math.sqrt(discriminant);\n\n            var t1 = minusPHalf + root;\n            var t2 = minusPHalf - root;\n\n            var tMin = Math.min(t1, t2);\n            var tMax = Math.max(t1, t2);\n\n            t = tMin > 0 ? tMin : tMax; // get the smaller of the two times, unless it's negative\n            if (t < 0) { // we don't want a solution in the past\n                return;\n            }\n        }\n\n        //TODO: Not sure why but I have to cut it in half to actually hit\n        t=t*0.5;\n        // calculate the point of interception using the found intercept time and return it\n        return new Phaser.Math.Vector2(objPos.x + t * objVel.x, objPos.y + t * objVel.y);\n\n    }\n}","import Phaser from 'phaser'\nimport Ship from './Ship'\n\nexport default class extends Ship\n{\n    constructor(scene, x, y, texture, frame, collectCallback)\n    {\n        super(scene, x, y, 1, texture, frame);\n        this.scale = 0.15;\n        this.setScale(this.scale);\n        this.type = \"Collector\";\n        this.caught = [];\n\n        this.collectCallback = collectCallback;\n        this.targetTypes.push('Asteroid');\n    }\n\n    preUpdate(time,delta)\n    {\n        this.targets.forEach((obj) => {\n            // Stop it in its tracks and let it pull into the collector\n            obj.body.setVelocity(0,0);\n            obj.setActive(false);\n            obj.body.enable = false;\n            var vel = new Phaser.Math.Vector2(this.x-obj.x,this.y-obj.y);\n            vel.normalize();\n            vel.scale(this.body.velocity.length()*0.1,this.body.velocity.length()*0.1);\n            obj.x += vel.x*delta/60;\n            obj.y += vel.y*delta/60;\n            var overlap = new Phaser.Geom.Circle(this.x,this.y,this.body.radius);\n            if (Phaser.Geom.Circle.ContainsPoint(overlap,obj))\n            {\n                this.targets = this.targets.filter((v) => v !== obj);\n                if (this.collectCallback !== undefined)\n                    this.collectCallback(obj);\n            }\n        });\n    }\n}","import Phaser from 'phaser'\nimport Ship from './Ship'\n\nexport default class extends Ship\n{\n    constructor(scene, x, y, texture, frame)\n    {\n        super(scene, x, y, 1, texture, frame);\n        this.scale = 0.15;\n        this.setScale(this.scale);\n        this.type = \"Shielder\";\n        this.empty = false;\n        this.rechargeTimer = 0;\n        this.particles = scene.add.particles('flares');\n\n        this.emitter = this.particles.createEmitter({\n            frame: { frames: ['blue'], cycle:true },\n            quantity: 4,\n            frequency: 50,\n            scale: 0.15,\n            lifespan: 4000,\n            blendMode: 'SCREEN'\n        });\n\n        this.emitter.startFollow(this,-5,5,true);\n    }\n\n    setTarget(target)\n    {\n        this.target = target;\n        this.target.addShielder(this);\n\n        this.particles.createGravityWell({\n            x: this.target.x,\n            y: this.target.y,\n            power: 1,\n            gravity: 100\n        });\n\n        var circle = new Phaser.Geom.Circle(this.target.x,this.target.y,this.target.body.halfWidth);\n        this.emitter.setDeathZone({ type: 'onEnter', source: circle });\n    }\n\n    preUpdate(time,delta)\n    {\n        if (this.empty)\n        {\n            this.rechargeTimer += delta;\n            if (this.rechargeTimer >= 2000)\n            {\n                this.empty = false;\n                this.rechargeTimer = 0;\n                this.durability = 1;\n                if (this.target.active)\n                {\n                    this.target.updateShield(true);\n                    this.emitter.start();\n                }\n            }\n        }\n        if (!this.target.active)\n        {\n            this.emitter.stop();\n        }\n        else\n        {\n            this.rotation = Phaser.Math.Angle.BetweenPoints(this,this.target)+4*Math.PI;\n        }\n    }\n\n    takeDamage(damage)\n    {\n        if (this.destroyed !== undefined && this.durability <= 0)\n        {\n            this.target.removeShielder(this);\n            this.destroyed(this);\n        }\n        else\n        {\n            this.durability -= damage; // TODO: Use mass and speed somehow instead?\n\n            if (this.durability == 0)\n            {\n                this.emitter.stop();\n                this.empty = true;\n            }\n        }\n    }\n}","import Phaser from 'phaser'\n\nexport default class extends Phaser.GameObjects.Sprite\n{\n    constructor(scene,x,y,texture,frame)\n    {\n        super(scene,x,y,texture,frame);\n        scene.add.existing(this);\n        scene.physics.add.existing(this);\n        this.scale = 0.1;\n        this.setScale(this.scale);\n        this.type = \"Bullet\";\n        this.life = 5000;\n        this.body.mass = 0.25;\n        this.body.radius = 1;\n        // TODO: There's got to be an object override collide...\n        scene.physics.world.bodies.entries.forEach((v) => {\n            if (v.gameObject.type == \"EnemyRocket\")\n            {\n                scene.physics.add.overlap(this,v.gameObject,this.overlaps,null,this);\n            }\n        })\n    }\n\n    overlaps(bullet,other)\n    {\n        other.takeDamage(1);\n        bullet.life = 0;\n        this.setActive(false);\n        this.setVisible(false);\n    }\n\n    preUpdate(time,delta)\n    {\n        this.life-=delta;\n        if (this.life<=0)\n        {\n            this.setActive(false);\n            this.setVisible(false);\n        }\n    }\n\n    fire(x, y)\n    {\n        this.setPosition(x, y);\n        this.setActive(true);\n        this.setVisible(true);\n    }\n}","import Phaser from 'phaser'\nimport Bullet from '../spaceobjects/Bullet'\n\nexport default class\n{\n    constructor(parent,recharge,speed)\n    {\n        this.parent = parent;\n        this.rechargeMax = recharge;\n        this.recharge = recharge;\n        this.speed = speed;\n        this.canFire = false;\n    }\n\n    update(delta)\n    {\n        if (this.canFire == false)\n        {\n            this.recharge -= delta;\n            if (this.recharge <= 0)\n            {\n                this.recharge = this.rechargeMax;\n                this.canFire = true;\n            }\n        }\n    }\n\n    takeAShot(aimPoint)\n    {\n        var bullet = new Bullet(this.parent.scene,this.parent.x,this.parent.y,'bullet');\n        var bulletVel = new Phaser.Math.Vector2(aimPoint.x-this.parent.x,aimPoint.y-this.parent.y);\n        bulletVel.normalize();\n        bulletVel.scale(this.speed);\n        bullet.body.setVelocity(bulletVel.x,bulletVel.y);\n        \n        // For debugging where it's trying to intercept\n        //this.scene.add.circle(pointOfIntercept.x,pointOfIntercept.y,3,0xC0F000,1);\n        this.canFire = false;\n    }\n}","import Phaser from 'phaser'\nimport Ship from './Ship'\nimport Gun from '../components/Gun'\n\nexport default class extends Ship\n{\n    constructor(scene, x, y, texture, frame)\n    {\n        super(scene, x, y, 1, texture, frame);\n        this.scale = 0.25;\n        this.setScale(this.scale);\n        this.setTint(0xAA0000);\n        this.type = \"WeaponPlatform\";\n        this.detectionRadius = 200;\n        this.targetTypes.push('EnemyRocket');\n\n        this.gun = new Gun(this,500,200);\n    }\n\n    preUpdate(time, delta)\n    {\n        this.gun.update(delta);\n        if (this.gun.canFire && this.targets.length > 0)\n        {\n            var obj = this.getClosestTarget();\n            // Get closest target\n            if (obj === undefined)\n                return;\n\n            var pointOfIntercept = this.getInterceptPoint(obj,this.gun.speed);\n            if (pointOfIntercept === undefined)\n                return;\n\n            this.gun.takeAShot(pointOfIntercept);\n        }\n    }\n}","import Phaser from 'phaser'\nimport Ship from './Ship'\nimport Gun from '../components/Gun'\n\nexport default class extends Ship\n{\n    constructor(scene, x, y, texture, frame)\n    {\n        super(scene, x, y, 1, texture, frame);\n        this.setTint(0x00AA00);\n        this.scale = 0.25;\n        this.setScale(this.scale);\n        this.type = \"Interceptor\";\n        this.detectionRadius = 300;\n        this.speed = 300;\n        this.targetTypes.push(\"EnemyRocket\");\n        this.gun = new Gun(this,100,100);\n\n        this.mode = \"idle\";\n    }\n\n    engage(obj)\n    {\n        this.originalVelocity = new Phaser.Math.Vector2(this.body.velocity.x,this.body.velocity.y);\n        this.originalPosition = new Phaser.Math.Vector2(this.x,this.y);\n\n        this.mode = \"engaging\";\n    }\n\n    preUpdate(time,delta)\n    {\n        // remove any expired targets\n        this.targets = this.targets.filter((t) => {\n            return t.active;\n        });\n        var target;\n        if (this.targets.length == 0 && this.mode != \"idle\")\n        {\n            this.mode = \"returning\";\n        }\n        else\n        {\n            target = this.targets[0];\n        }\n        switch(this.mode)\n        {\n            case \"idle\":\n            {\n                // See if we have a target and engage them\n                if (this.targets.length > 0)\n                {\n                    this.engage(this.targets[0]);\n                }\n                break;\n            }\n            case \"engaging\":\n            {\n                // Flying to engage\n                var pointOfIntercept = this.getInterceptPoint(target,this.speed);\n                if (pointOfIntercept !== undefined)\n                {\n                    var newVelocity = new Phaser.Math.Vector2(pointOfIntercept.x-this.x,pointOfIntercept.y-this.y);\n                    newVelocity.normalize();\n                    newVelocity.scale(this.speed*(delta/60));\n                    this.setVelocity(newVelocity.x,newVelocity.y);\n                }\n\n                // Fire gun\n                this.gun.update(delta);\n                if (this.gun.canFire && this.targets.length > 0)\n                {\n                    var obj = this.getClosestTarget();\n                    // Get closest target\n                    if (obj === undefined)\n                        return;\n        \n                    var aimPoint = new Phaser.Math.Vector2(obj.x+obj.body.velocity.x,obj.y+obj.body.velocity.y);\n                    this.gun.takeAShot(aimPoint);\n                }\n                break;\n            }\n            case \"returning\":\n            {\n                // Return to position and velocity\n                var vel;\n                var dist = Phaser.Math.Distance.Between(this.originalPosition.x,this.originalPosition.y,this.x,this.y);\n                if (dist <= 1)\n                {\n                    vel = this.originalVelocity;\n                    this.mode = \"idle\";\n                }\n                else\n                {\n                    vel = new Phaser.Math.Vector2(this.originalPosition.x-this.x,this.originalPosition.y-this.y);\n                    vel.normalize();\n                    vel.scale(this.speed*(delta/60));\n                }\n                this.setVelocity(vel.x,vel.y);\n                break;\n            }\n        }\n    }\n\n    /*\n    setVelocity(x,y)\n    {\n        if (this.mode == \"engaging\")\n        {\n\n        }\n        super.setVelocity(x,y);\n    }*/\n}","import Collector from '../spaceobjects/Collector'\nimport Shielder from '../spaceobjects/Shielder'\nimport WeaponPlatform from '../spaceobjects/WeaponPlatform'\nimport Interceptor from '../spaceobjects/Interceptor'\n\nexport default class\n{\n    constructor()\n    {\n        this.Collector = {\n            name: \"Collector\",\n            class: Collector,\n            cost: 10\n        };\n        \n        this.Shielder = {\n            name: \"Shielder\",\n            class: Shielder,\n            cost: 50\n        };\n        \n        this.WeaponPlatform = {\n            name: \"WeaponPlatform\",\n            class: WeaponPlatform,\n            cost: 100\n        };\n\n        this.Interceptor = {\n            name: \"Interceptor\",\n            class: Interceptor,\n            cost: 500\n        };\n    }\n}","import OrbitObject from './OrbitObject'\nimport { HealthBar } from '../components/ui';\n\nexport default class extends OrbitObject\n{\n    constructor(scene, x, y, mass, texture, frame)\n    {\n        super(scene, x, y, mass, texture, frame);\n        this.durability = 10;\n        this.scale = 1;\n        this.setScale(this.scale);\n        this.type = \"Planet\";\n        this.hp = new HealthBar(scene, x-this.width*0.38, y-this.height*0.9, this.durability);\n\n        this.shielders = [];\n        this.particles = scene.add.particles('flares');\n\n        var shape = new Phaser.Geom.Circle(x, y, this.body.halfWidth);\n\n        this.shields = this.particles.createEmitter({\n            frame: { frames: ['blue'], cycle:true },\n            frequency: 1,\n            scale: { start: 0.3, end: 0.05},\n            blendMode: 'ADD',\n            emitZone: { type: 'edge', source: shape, quantity: 60, yoyo: false}\n        });\n        this.shields.stop();\n    }\n\n    updateShield()\n    {\n        var availableShields = this.shielders.filter(val => !val.empty );\n        if ((availableShields.length == 0 && this.shields.on) || !this.active)\n        {\n            this.shields.killAll();\n            this.shields.stop();\n        }\n        else if (availableShields.length > 0 && !this.shields.on)\n            this.shields.start();\n    }\n\n    addShielder(shielder)\n    {\n        this.shielders.push(shielder);\n        this.updateShield();\n    }\n\n    removeShielder(shielder)\n    {\n        this.shielders = this.shielders.filter(val => val !== shielder );\n        this.updateShield();\n    }\n\n    takeDamage(damage)\n    {\n        var availableShields = this.shielders.filter(val => !val.empty );\n        if (availableShields.length > 0)\n        {\n            // TODO: Return damage available?\n            availableShields[0].takeDamage(damage);\n        }\n        else\n        {\n            super.takeDamage(damage);\n            this.hp.decrease(damage);\n            if (this.durability <= 0)\n            {\n                this.hp.destroy();\n                this.updateShield();\n            }\n        }\n        this.updateShield();\n    }\n}","import Phaser from 'phaser'\nimport Ship from './Ship'\n\nexport default class extends Ship\n{\n    constructor(scene, x, y, texture, frame)\n    {\n        super(scene, x, y, 1, texture, frame);\n        this.scale = 0.25;\n        this.setScale(this.scale);\n        this.type = \"EnemyRocket\";\n    }\n\n    setTarget(target)\n    {\n        this.target = target;\n    }\n\n    preUpdate(time, delta)\n    {\n\n    }\n}","import OrbitObject from './OrbitObject'\n\nexport default class extends OrbitObject\n{\n    constructor(scene, x, y, type, texture, frame)\n    {\n        super(scene, x, y, 0.75, texture, frame);\n        this.scale = 0.25;\n        this.setScale(this.scale);\n        this.mineralType = type;\n        this.type = \"Asteroid\";\n        this.setTint(type.color);\n    }\n\n    preUpdate(time, delta)\n    {\n        // TODO: Run through simulation engine instead to get gravity modifications\n        //this.scene.graphics.lineStyle(1,0xff00ff,0.5);\n        //var endPoint = this.body.velocity.scale(50,50);\n        //graphics.strokeLineShape(new Phaser.Geom.Line(this.x,this.y,endPoint.x,endPoint.y));\n    }\n}","import Phaser from 'phaser'\n\nimport InGameUI from './scenes/InGameUI';\nimport InGame from './scenes/InGame';\n\nimport Spawner from './components/Spawner';\n\nvar config = {\n    type: Phaser.AUTO,\n    parent: 'game',\n    width: window.innerWidth,\n    height: window.innerHeight,\n    pixelArt: true,\n    physics: {\n        default: 'arcade',\n        arcade: {\n            gravity: { y: 0 },\n            debug: false\n        }\n    },\n    scene: [ InGame, InGameUI ]\n};\n\nvar game = new Phaser.Game(config);\n\nvar spawner = new Spawner();","import Phaser from 'phaser'\nimport Planet from '../spaceobjects/Planet'\nimport EnemyRocket from '../spaceobjects/EnemyRocket'\nimport EnemyUFO from '../spaceobjects/EnemyUFO'\n\nimport Asteroid from '../spaceobjects/Asteroid'\nimport MineralType from '../components/MineralType'\n\nexport default class extends Phaser.Scene\n{\n    constructor()\n    {\n        super({ key: 'InGame', active: true});\n        this.spaceObjects = [];\n        this.planet;\n        this.planetMass = 597200; \n\n        this.flickScale = 1;\n        this.inaccuracy = 1;\n\n        this.flickEstimate = {};\n        this.simulationSteps = 100;\n        this.graphics;\n\n        this.totalEnemies = 30;\n\n        this.cost = true;\n\n        this.spawning = false;\n\n        this.money = 0;\n        this.timer = 0;\n\n        this.referenceWidth = 1024;\n        this.referenceHeight = 768;\n    }\n\n    update(elapsedTime, delta)\n    {\n        this.spaceObjects.forEach((p,idx) => {\n            this.updateBody(p,idx);\n            if (p.scanForTarget !== undefined)\n            {\n                p.scanForTarget(this.spaceObjects);\n            }\n        },this);\n\n        if (!this.uiScene.gameOver)\n        {\n            this.timer += delta;\n            if (this.timer > 500)\n            {\n                this.money += 1;\n                this.timer = 0;\n            }\n        }\n    }\n\n    preload ()\n    {\n        this.load.spritesheet('Collector', 'assets/collector.png', { frameWidth: 200, frameHeight: 200 });\n        this.load.spritesheet('Shielder', 'assets/shielder.png', { frameWidth: 200, frameHeight: 200 });\n        this.load.spritesheet('WeaponPlatform', 'assets/point.png', { frameWidth: 29, frameHeight: 29 });\n        this.load.spritesheet('Interceptor', 'assets/point.png', { frameWidth: 29, frameHeight: 29 });\n        this.load.spritesheet('asteroid', 'assets/point.png', { frameWidth: 29, frameHeight: 29 });\n        this.load.spritesheet('bullet', 'assets/point.png', { frameWidth: 29, frameHeight: 29 });\n        this.load.spritesheet('planet', 'assets/planet.png', { frameWidth: 107, frameHeight: 109});\n        this.load.spritesheet('boom', 'assets/explosion.png', { frameWidth: 64, frameHeight: 64, endFrame: 23 });\n        this.load.spritesheet('rocket', 'assets/rocket.png', { frameWidth: 23, frameHeight: 38});\n        this.load.atlas('flares', 'assets/flares.png', 'assets/flares.json');\n    }\n\n    create()\n    {\n        var me = this;\n        this.uiScene = this.game.scene.getScene('InGameUI');\n\n        window.addEventListener('resize', function (event) {\n            me.resize(window.innerWidth, window.innerHeight);\n        }, false);\n        var config = this.game.config;\n        this.graphics = this.add.graphics();\n\n        this.events.on('resize', me.resize, me);\n        \n        this.planet = new Planet(this,config.width/2,config.height/2,this.planetMass,'planet');\n\n        this.planet.onDestroyed(this.destroyObject);\n\n        this.resize(window.innerWidth,window.innerHeight);\n\n        var animConfig = {\n            key: 'explode',\n            frames: this.anims.generateFrameNumbers('boom', { start: 0, end: 23, first: 23 }),\n            frameRate: 30,\n            repeat: 0\n        };\n\n        this.anims.create(animConfig);\n\n        this.flickEstimate = this.physics.add.sprite(0,0,'');\n        this.flickEstimate.body.mass = 1;\n        this.flickEstimate.body.radius = 32;\n        this.flickEstimate.body.enable = false;\n        this.flickEstimate.visible = false;\n\n        //  Events\n\n        this.input.on('pointerdown', function (pointer) {\n            if (pointer.event.cancelBubble == true || this.uiScene.gameOver) {return;}\n\n            var downPoint = this.cameras.main.getWorldPoint(pointer.x,pointer.y);\n            if (this.money < this.spawnMode.cost && this.cost) \n            {\n                this.uiScene.showError(\"Need at least \"+this.spawnMode.cost+\" money\",downPoint);\n                pointer.event.cancelBubble = true;\n                return;\n            }\n            this.spawning = true;\n            if (this.spawnMode == 'enemies')\n            {\n                // Spawn Rocket\n                var enemy = new EnemyRocket(this,downPoint.x,downPoint.y,'rocket');\n                this.physics.accelerateToObject(enemy, this.planet, 5);\n                enemy.rotation = Phaser.Math.Angle.BetweenPoints(enemy,this.planet)+Math.PI/2;\n                enemy.onDestroyed(this.destroyObject);\n                this.spaceObjects.push(enemy);\n            }\n            else\n            {\n                this.flickEstimate.body.velocity = Phaser.Math.Vector2.ZERO;\n\n                var points = this.simulateFrom(this.flickEstimate,downPoint.x,downPoint.y,this.simulationSteps);\n                for(var i=0;i<points.length-1;i++)\n                {\n                    this.drawLine(points[i].x,points[i].y,points[i+1].x,points[i+1].y,2,0xff0ff);\n                }\n\n            }\n        }, this);\n\n        this.input.on('pointerup', function (pointer) {\n            if (!this.spawning || this.spawnMode == 'enemies' || this.uiScene.gameOver) {return;}\n            this.graphics.clear();\n            var texture = this.spawnMode.name; \n            \n            var downPoint = this.cameras.main.getWorldPoint(pointer.downX,pointer.downY);\n            var upPoint = this.cameras.main.getWorldPoint(pointer.upX,pointer.upY)\n\n            var point = new this.spawnMode.class(this,downPoint.x,downPoint.y,texture);\n            if (this.spawnMode.name != \"Shielder\")\n            {\n                if (this.spawnMode.name == \"Collector\")\n                {\n                    point.collectCallback = (obj) => { \n                        this.money += obj.mineralType.value;\n                        //spaceObjects = spaceObjects.filter((o) => { o !== obj});\n                        this.destroyObject(obj, false);\n                    }\n                }\n            }\n            else\n            {\n                point.setTarget(this.planet);\n            }\n                \n            point.onDestroyed(this.destroyObject);\n\n            // Pull to fling\n            //point.setVelocity((pointer.downX-pointer.upX)*flickScale,(pointer.downY-pointer.upY)*flickScale);\n            \n            // Flick to fling\n            point.setVelocity((upPoint.x-downPoint.x)*this.flickScale,(upPoint.y-downPoint.y)*this.flickScale);\n\n            this.spaceObjects.push(point);\n            this.money -= this.spawnMode.cost;\n            this.spawning = false;\n        },this);\n\n        this.input.on('pointermove', function (pointer) {\n            if(!pointer.isDown || !this.spawning || this.spawnMode == 'enemies' || this.uiScene.gameOver) { return; }\n            // Only do stuff if the pointer is down\n            this.graphics.clear();\n\n            var downPoint = this.cameras.main.getWorldPoint(pointer.downX,pointer.downY);\n            var currentPoint = this.cameras.main.getWorldPoint(pointer.x,pointer.y);\n\n            this.flickEstimate.body.velocity.setTo((currentPoint.x-downPoint.x)*this.flickScale,(currentPoint.y-downPoint.y)*this.flickScale);\n            var points = this.simulateFrom(this.flickEstimate,downPoint.x,downPoint.y,this.simulationSteps);\n            for(var i=0;i<points.length-1;i++)\n            {\n                this.drawLine(points[i].x,points[i].y,points[i+1].x,points[i+1].y,2,0xff0ff);\n            }\n        },this);\n\n        // TODO: Create Spawners\n        this.time.delayedCall(Phaser.Math.RND.integerInRange(8,10)*1000, this.spawnAsteroid,[],this);\n        this.time.delayedCall(Phaser.Math.RND.integerInRange(3,8)*1000, this.spawnEnemy,[],this);\n    }\n    \n    resize(width,height)\n    {\n        // TODO: Detect landscape vs portrait?\n        // Set zoom level to keep the area around the planet visible\n        this.cameras.main.setZoom(width/this.referenceWidth);\n        // Set viewport so you can see everything..\n        this.cameras.main.setViewport(0,0,width,height);\n        // Scroll so the planet is roughly in the center\n        var halfWidth = width*0.5;\n        var halfHeight = height*0.5;\n        var x = -halfWidth + this.planet.x;\n        var y = -halfHeight + this.planet.y;\n        this.cameras.main.setScroll(x,y);\n        this.game.config.width = width;\n        this.game.config.height = height;\n    }\n    \n    spawnAsteroid()\n    {\n        // Points to use\n        var spawnPoint = new Phaser.Math.Vector2();\n        var center = new Phaser.Math.Vector2();\n        this.planet.getCenter(center);\n        center.x += Phaser.Math.RND.between(-200,200);\n        center.y += Phaser.Math.RND.between(-200,200);\n        // Get the distance from the planet\n        var radius = Phaser.Math.RND.between(500,1500);\n        // Get a point on the circumference of the spawn area\n        Phaser.Geom.Circle.GetPoint(new Phaser.Geom.Circle(center.x,center.y,radius),Phaser.Math.RND.frac(),spawnPoint);\n        // Set a speed\n        var speed = Phaser.Math.RND.between(50,250);\n        // Point at the planet\n        // TODO: Maybe just point it in a random direction on the unit circle with less velocity, to give a better shape to their approach\n        var dir = center.subtract(spawnPoint);\n        // Set velocity to planet\n        dir.normalize();\n        var velocity = dir.scale(speed);\n\n        var mineralKeys = Object.keys(MineralType);\n\n        var asteroid = new Asteroid(\n            this, \n            spawnPoint.x, \n            spawnPoint.y, \n            MineralType[mineralKeys[Phaser.Math.RND.between(0,mineralKeys.length-1)]],\n            'asteroid'\n        );\n        asteroid.body.setVelocity(velocity.x,velocity.y);\n        asteroid.setScale(0.25);\n        asteroid.onDestroyed(this.destroyObject);\n        this.spaceObjects.push(asteroid);\n        // Schedule another asteroid\n        this.time.delayedCall(Phaser.Math.RND.integerInRange(8,10)*1000, this.spawnAsteroid,[],this);\n    }\n\n\n    spawnEnemy()\n    {\n        // Points to use\n        var spawnPoint = new Phaser.Math.Vector2();\n        var center = new Phaser.Math.Vector2();\n        this.planet.getCenter(center);\n        center.x += Phaser.Math.RND.between(-64,64);\n        center.y += Phaser.Math.RND.between(-64,64);\n        // Get the distance from the planet\n        var radius = Phaser.Math.RND.between(500,1500);\n        // Get a point on the circumference of the spawn area\n        Phaser.Geom.Circle.GetPoint(new Phaser.Geom.Circle(center.x,center.y,radius),Phaser.Math.RND.frac(),spawnPoint);\n        // Set a speed\n        var speed = Phaser.Math.RND.between(10,50);\n        // Point at the planet\n        var dir = center.subtract(spawnPoint);\n        // Set velocity to planet\n        dir.normalize();\n        var velocity = dir.scale(speed);\n\n        var rocket = new EnemyRocket(\n            this, \n            spawnPoint.x, \n            spawnPoint.y,\n            'rocket'\n        );\n        rocket.rotation = Phaser.Math.Angle.BetweenPoints(rocket,this.planet)+Math.PI/2;\n        rocket.setTarget(center.x,center.y);\n        rocket.body.setVelocity(velocity.x,velocity.y);\n        rocket.setScale(0.5);\n        rocket.onDestroyed(this.destroyObject);\n        this.spaceObjects.push(rocket);\n        this.totalEnemies -= 1;\n        if (this.totalEnemies > 0)\n        {\n            // Schedule another\n            this.time.delayedCall(Phaser.Math.RND.integerInRange(3,8)*1000, this.spawnEnemy,[],this);\n        }\n    }\n\n    destroyObject(obj, explode) \n    {\n        if (explode === undefined)\n            explode = true\n        var scene = this.spaceObjects === undefined ? this.scene : this;\n        if (explode)\n        {\n            scene.explosion(obj.body.x,obj.body.y);\n        }\n        scene.spaceObjects = scene.spaceObjects.filter((val, idx) => {\n            return obj != val;\n        });\n        if (obj.type == \"Planet\")\n            scene.setGameOver(false);\n        else if (obj.type == \"EnemyRocket\" && scene.totalEnemies == 0)\n            scene.setGameOver(true);\n        obj.destroy();\n    }\n\n    setGameOver(won)\n    {\n        if (!this.uiScene.gameOver)\n            this.uiScene.setGameOver(won);\n    }\n\n    simulateFrom(obj,x,y,steps)\n    {\n        if (steps === undefined)\n            steps = 1000;\n        var delta = 16.666599999999743/steps;\n        var points = [];\n        obj.x = x;\n        obj.y = y;\n        obj.body.enable = true;\n\n        // TODO: do smarter updates?\n        for(var i=0;i<steps;i++)\n        {\n            var cont = this.simulateUpdate(obj,delta);\n            obj.x += obj.body.velocity.x * delta;\n            obj.y += obj.body.velocity.y * delta;\n            points[i] = new Phaser.Math.Vector2(obj.x,obj.y);\n            if (!cont)\n                break;\n        }\n\n        obj.body.enable = false;\n        \n        return points;\n    }\n\n    accelerateToObject(gameObject,to,speed)\n    {\n        var angle = Math.atan2(to.y - gameObject.y, to.x - gameObject.x);\n\n        gameObject.body.acceleration.setToPolar(angle, speed);\n        \n        return angle;\n    }\n\n    simulateUpdate(obj, delta) \n    {\n        if (delta===undefined) { delta = 0.1; }\n        obj.body.acceleration.setTo(0, 0);\n        //Loop around all points\n        this.spaceObjects.forEach(function(item) {\n            var ax = item.body.acceleration.x;\n            var ay = item.body.acceleration.y;\n            var dx = item.x - item.x;\n            var dy = item.y - item.y;\n            var r = dx * dx + dy * dy;\n            if (r > obj.body.radius * obj.body.radius) {       \n                //The force on a body is (body.mass)/r^2 so taking every non planet body with\n                // mass=1 the acceleration = force,  (r is already squared save us a sqrt)\n                this.accelerateToObject(item, obj, (((obj.body.mass) / r)));\n                        \n                ax = ax + item.body.acceleration.x;\n                ay = ay + item.body.acceleration.y;\n                item.body.acceleration.setTo(ax, ay);\n            }\n            else\n            {\n                return false;\n            }\n        });\n        //Accelerate to planet\n        var ax = obj.body.acceleration.x;\n        var ay = obj.body.acceleration.y;\n        var dx = obj.x - this.planet.x;\n        var dy = obj.y - this.planet.y;     \n        var r = dx * dx + dy * dy;\n        if (!this.planet.active)\n            return true;\n        if (r < this.planet.body.radius * this.planet.body.radius) { //|| (r > killRadius * killRadius)) {       \n            return false;\n        } else {\n            this.accelerateToObject(obj, this.planet, (this.planet.body.mass / r));\n            ax = ax + obj.body.acceleration.x;       \n            ay = ay + obj.body.acceleration.y;       \n            obj.body.acceleration.setTo(ax, ay);\n        }\n        this.computeVelocity(obj.body,delta);\n        return true;\n    }\n\n    computeVelocity(body, delta)\n    {\n        var velocityX = body.velocity.x;\n        var accelerationX = body.acceleration.x;\n        var dragX = body.drag.x;\n        var maxX = body.maxVelocity.x;\n\n        var velocityY = body.velocity.y;\n        var accelerationY = body.acceleration.y;\n        var dragY = body.drag.y;\n        var maxY = body.maxVelocity.y;\n\n        var speed = body.speed;\n        var allowDrag = body.allowDrag;\n        var useDamping = body.useDamping;\n\n        if (body.allowGravity)\n        {\n            var gravX = this.game.config.physics.arcade.gravity.x ? this.game.config.physics.arcade.gravity.x : 0;\n            var gravY = this.game.config.physics.arcade.gravity.y ? this.game.config.physics.arcade.gravity.y : 0;\n            velocityX += (gravX + body.gravity.x) * delta;\n            velocityY += (gravY + body.gravity.y) * delta;\n        }\n\n        if (accelerationX)\n        {\n            velocityX += accelerationX * delta;\n        }\n        else if (allowDrag && dragX)\n        {\n            if (useDamping)\n            {\n                //  Damping based deceleration\n                velocityX *= dragX;\n\n                if (FuzzyEqual(speed, 0, 0.001))\n                {\n                    velocityX = 0;\n                }\n            }\n            else\n            {\n                //  Linear deceleration\n                dragX *= delta;\n\n                if (FuzzyGreaterThan(velocityX - dragX, 0, 0.01))\n                {\n                    velocityX -= dragX;\n                }\n                else if (FuzzyLessThan(velocityX + dragX, 0, 0.01))\n                {\n                    velocityX += dragX;\n                }\n                else\n                {\n                    velocityX = 0;\n                }\n            }\n        }\n\n        if (accelerationY)\n        {\n            velocityY += accelerationY * delta;\n        }\n        else if (allowDrag && dragY)\n        {\n            if (useDamping)\n            {\n                //  Damping based deceleration\n                velocityY *= dragY;\n\n                if (FuzzyEqual(speed, 0, 0.001))\n                {\n                    velocityY = 0;\n                }\n            }\n            else\n            {\n                //  Linear deceleration\n                dragY *= delta;\n\n                if (FuzzyGreaterThan(velocityY - dragY, 0, 0.01))\n                {\n                    velocityY -= dragY;\n                }\n                else if (FuzzyLessThan(velocityY + dragY, 0, 0.01))\n                {\n                    velocityY += dragY;\n                }\n                else\n                {\n                    velocityY = 0;\n                }\n            }\n        }\n\n        velocityX = Phaser.Math.Clamp(velocityX, -maxX, maxX);\n        velocityY = Phaser.Math.Clamp(velocityY, -maxY, maxY);\n\n        body.velocity.set(velocityX, velocityY);\n    }\n\n    updateBody(ast_) \n    {\n        if (ast_.body === undefined) { \n            // No body? Go away!\n            return;\n        }\n        ast_.body.acceleration.setTo(0, 0);\n        \n        var scene = ast_.scene;\n        //Loop around all points\n        var destroyed = [];\n        this.spaceObjects.forEach(function(item) {\n            if (item !== ast_)\n            {\n                var ax = item.body.acceleration.x;\n                var ay = item.body.acceleration.y;\n                var dx = item.x - ast_.x;\n                var dy = item.y - ast_.y;\n                var r = dx * dx + dy * dy;\n                if (r > ast_.body.radius * ast_.body.radius) {       \n                    //The force on a body is (body.mass)/r^2 so taking every non planet body with       \n                    // mass=1 the acceleration = force,  (r is already squared save us a sqrt)         \n                    scene.physics.accelerateToObject(item, ast_, (((item.body.mass) / r)));        \n                    ax = ax + item.body.acceleration.x;         \n                    ay = ay + item.body.acceleration.y;         \n                    item.body.acceleration.setTo(ax, ay);       \n                }\n                else\n                {\n                    if (item.active\n                        && ast_.active)\n                        destroyed.push(item);\n                }\n            }\n        });\n        if (destroyed.length > 0)\n        {\n            for(var i=0;i<destroyed.length;i++)\n            {\n                destroyed[i].takeDamage(1);\n            }\n            ast_.takeDamage(1);        \n        }\n        else\n        {\n            //Accelerate to planet\n            var ax = ast_.body.acceleration.x;     \n            var ay = ast_.body.acceleration.y;     \n            var dx = ast_.x - scene.planet.x;     \n            var dy = ast_.y - scene.planet.y;     \n            var r = dx * dx + dy * dy;\n            if (!scene.planet.active)\n                return;\n            if (r < scene.planet.body.radius * scene.planet.body.radius) { //|| (r > killRadius * killRadius)) {       \n                ast_.takeDamage(1);\n                scene.planet.takeDamage(1);\n            } else {\n                scene.physics.accelerateToObject(ast_, scene.planet, (scene.planet.body.mass / r));\n                ax = ax + ast_.body.acceleration.x;       \n                ay = ay + ast_.body.acceleration.y;       \n                ast_.body.acceleration.setTo(ax, ay);\n            }\n        }   \n    }\n\n    explosion(x,y)\n    {\n        // TODO: Object pooling... and a better way to get to add. Is there internal pooling?\n        var boom = this.add.sprite(x, y, 'boom', 23);\n        boom.setScale(0.25);\n\n        boom.anims.play('explode');\n        boom.on('animationcomplete', (v) => {\n            boom.destroy();\n        });\n    }\n\n    DEG2RAD(deg)\n    {\n        return deg*(Math.PI/180);\n    }\n\n\n    drawLine(x1,y1,x2,y2,width,color,trans)\n    {\n        width = !width ? 1 : width;\n        color = !color ? 0xff00ff : color;\n        trans = !trans ? 0.5 : trans;\n        this.graphics.lineStyle(width,color,trans);\n        this.graphics.strokeLineShape(new Phaser.Geom.Line(x1,y1,x2,y2));\n    }\n\n    drawArrow(x1,y1,x2,y2,width,color,trans)\n    {\n        width = !width ? 1 : width;\n        color = !color ? 0xff00ff : color;\n        trans = !trans ? 0.5 : trans;\n        this.graphics.lineStyle(width,color,trans);\n        var line = new Phaser.Geom.Line(x1,y1,x2,y2);\n        this.graphics.strokeLineShape(line);\n        var midPoint;\n        midPoint = Phaser.Geom.Line.GetMidPoint(line);\n        var arrowLine = new Phaser.Geom.Line(x2,y2,midPoint.x,midPoint.y);\n        this.graphics.strokeLineShape(Phaser.Geom.Line.RotateAroundXY(arrowLine,x2,y2,DEG2RAD(20)));\n        this.graphics.strokeLineShape(Phaser.Geom.Line.RotateAroundXY(arrowLine,x2,y2,DEG2RAD(-40)));\n    }\n\n    drawEllipse(ellipse,width,color,trans)\n    {\n        width = !width ? 2 : width;\n        color = !color ? 0xffff00 : color;\n        trans = !trans ? 0.5 : trans;\n        this.graphics.lineStyle(width,color,trans);\n        this.graphics.strokeEllipseShape(ellipse);\n    }\n\n    drawCircle(circle,width,color,trans)\n    {\n        width = !width ? 2 : width;\n        color = !color ? 0xff0000 : color;\n        trans = !trans ? 0.5 : trans;\n        this.graphics.lineStyle(width,color,trans);\n        this.graphics.strokeCircleShape(circle);\n    }\n}","import Phaser from 'phaser';\nimport { UIButton, FloatingText, FPSCounter } from '../components/ui';\nimport Spawner from '../components/Spawner';\n\nexport default class extends Phaser.Scene\n{\n    constructor()\n    {\n        super({key: 'InGameUI', active:true});\n        this.moneyText = null;\n        this.spawner = new Spawner();\n        this.spawnButtons = [];\n        this.gameOver = false;\n    }\n\n    preload()\n    {\n        this.load.spritesheet('ui-button', 'assets/ui/button.png', { frameWidth: 80, frameHeight: 40});\n    }\n\n    update(delta,time)\n    {\n        this.moneyText.text = \"Money: \"+this.gameScene.money;\n        this.fps.update(delta,time);\n    }\n\n    showError(text,pos)\n    {\n        var error = new FloatingText(this,pos.x,pos.y+30,text, {fill:'#FFF'});\n        this.add.existing(error);\n    }\n\n    setGameOver(won)\n    {\n        this.gameOver = true;\n        this.spawnButtons.forEach((b) => {\n            b.active = false;\n        });\n        this.gameOverText = new Phaser.GameObjects.Text(this, this.game.config.width/2-35, this.game.config.height/2, won ? \"You destroyed all the enemies!\" : \"Game over, man. Game over.\", { fill: '#F00', fontWeight: 'bold' });\n        this.add.existing(this.gameOverText);\n        this.gameOverButton = new UIButton(this, this.game.config.width/2-80, this.game.config.height/2-25, 160, 50, \"Restart\", { fill: '#000'});\n        var self = this;\n        this.gameOverButton.on(\"pointerdown\", function(pointer) {\n            window.location = window.location;\n        });\n    }\n\n    create()\n    {\n        var config = this.game.config;\n        this.gameScene = this.game.scene.getScene('InGame');\n\n        this.moneyText = new Phaser.GameObjects.Text(this, 10, 10, \"Money: \"+this.gameScene.money, { fill: '#FFF' });\n        this.fps = new FPSCounter(this, this.game.config.width-25, 10);\n\n        this.add.existing(this.moneyText);\n\n        var debugBtn = new UIButton(this, this.game.config.width-85, this.game.config.height-25, 160, 50, (this.gameScene.cost ? '' : 'Don\\'t\\n')+\" Enforce Cost\", { fill: '#000' });\n        var gameScene = this.gameScene;\n        debugBtn.on(\"pointerdown\", function(pointer) {\n            pointer.event.cancelBubble = true;\n            gameScene.cost = !gameScene.cost;\n            this.setText((gameScene.cost ? '' : 'Don\\'t\\n')+\" Enforce Cost\");\n        });\n\n        var xLoc = 75;\n        var self = this;\n        Object.keys(this.spawner).forEach(function(key) {\n            var item = this.spawner[key];\n            var btn = new UIButton(this, xLoc, config.height-40, 150, 50, key+\"\\n$\"+item.cost, { fill: '#000' });\n            btn.on(\"pointerdown\", function(pointer) {\n                if (self.gameOver) { return; }\n                self.spawnButtons.forEach((b) => {\n                    b.setSelected(false);\n                });\n                pointer.event.cancelBubble = true;\n                self.gameScene.spawnMode = item;\n                this.setSelected(true);\n            });\n            if (self.gameScene.spawnMode === null)\n            {\n                self.gameScene.spawnMode = item;\n                btn.setSelected(true);\n            }\n            xLoc += 150\n            this.spawnButtons.push(btn);\n        },this);\n    }\n}"],"sourceRoot":""}